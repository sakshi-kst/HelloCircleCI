# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1

# Create a command to print Circle CI Workflow ID
commands:
  printworkflowid:
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID

# Create a list of jobs
jobs:
  print_hello:
    # Use docker image for Node.js
    docker:
      - image: circleci/node:13.8.0
    # Add step to print Hello
    steps:
      - run: echo "Hello"
  
  print_name:
    # Use docker image for Node.js
    docker:
      - image: circleci/node:13.8.0
    # Add step to print Hello and fetch my name from env variable
    steps:
      - run: echo "Hello" $myName
      
  save_output:
    # Use docker image for Node.js
    docker:
      - image: circleci/node:13.8.0
    # Add step to save Hello Sakshi in a txt file
    steps:
      - run: echo "Hello Sakshi" > /tmp/output.txt
      # Persist txt file to workspace
      - persist_to_workspace:
          root: /tmp
          paths:
            - output.txt
  
  print_output:
    # Use docker image for Node.js
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Attach workspace to fetch txt file
      - attach_workspace:
          at: /tmp
      # Print contents of txt file
      - run: cat /tmp/output.txt
      
  print_workflow_id:
    # Use docker image for Node.js
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Call the command printWorkflowID
      - printworkflowid
      
  failing_job:
    # Use docker image for Node.js
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Return exit code 1 to fail build step
      - run: exit 1
      
  on_fail_job:
    # Use docker image for Node.js
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Run this step even if previous steps failed
      - run:
          command: echo "It ran :)"
          when: on_fail      

# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the jobs
    jobs:
      - welcome/run
      - print_hello
      - print_name
      - save_output
      - print_output:
          # Add a prerequisite step for print_output
          requires: [save_output]
      - print_workflow_id
      - failing_job
      - on_fail_job:
          # Add a prerequisite step for on_fail_job
          requires: [failing_job]
